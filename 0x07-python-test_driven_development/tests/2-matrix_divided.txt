import unittest
import 2-matrix_divided.py

class TestMatrixDividedFunction(unittest.TestCase):

    def test_valid_matrix_division(self):
        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        div = 2
        result = matrix_divided(matrix, div)
        expected_result = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]
        self.assertEqual(result, expected_result)

    def test_invalid_matrix_type(self):
        matrix = [[1, 2, 3], [4, 5, '6'], [7, 8, 9]]
        div = 2
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

    def test_unequal_row_sizes(self):
        matrix = [[1, 2, 3], [4, 5], [7, 8, 9]]
        div = 2
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

    def test_invalid_divisor_type(self):
        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        div = '2'
        with self.assertRaises(TypeError):
            matrix_divided(matrix, div)

    def test_division_by_zero(self):
        matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        div = 0
        with self.assertRaises(ZeroDivisionError):
            matrix_divided(matrix, div)

if __name__ == '__main__':
    unittest.main()
